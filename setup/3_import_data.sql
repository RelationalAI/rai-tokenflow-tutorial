--
-- data
--
USE ROLE ACCOUNTADMIN;
USE DATABASE TF_DB;
USE SCHEMA TF_SCHEMA;
USE WAREHOUSE TF_WH;

--
-- date parameters for the GNN use case
--
SET train_start_date = '2014-10-21';
SET train_end_date = '2025-01-16';
SET validation_date = '2025-01-17';
SET test_date = '2025-01-27';


-- token-transfers.csv
CREATE OR REPLACE TABLE TOKEN_TRANSFERS (
    LAUNCHPAD VARCHAR,
    TOKEN VARCHAR,
    SYMBOL VARCHAR,
    NAME VARCHAR,
    BLOCK_NUMBER NUMBER,
    BLOCK_TIMESTAMP DATETIME,
    TX_HASH VARCHAR,
    FROM_ADDRESS VARCHAR,
    L1_FEE NUMBER,
    L2_FEE NUMBER,
    SENDER VARCHAR,
    RECEIVER VARCHAR,
    AMOUNT NUMBER
);

ALTER TABLE TF_DB.TF_SCHEMA.TOKEN_TRANSFERS SET CHANGE_TRACKING = TRUE;

COPY INTO TOKEN_TRANSFERS
    from '@"TF_DB"."TF_SCHEMA"."TF_STAGE"/token-transfers.csv'
    FILE_FORMAT = (
        TYPE = CSV
        --COMPRESSION = BZ2
        SKIP_HEADER = 1
        NULL_IF = '\\N'
        EMPTY_FIELD_AS_NULL = TRUE
        DATE_FORMAT = AUTO --'YYYY-MM-DD HH:MM:SS'
        FIELD_OPTIONALLY_ENCLOSED_BY = '"'
        ESCAPE = '\\'
    )
    ON_ERROR = CONTINUE
;



-- virtuals-agents.csv
CREATE OR REPLACE TABLE VIRTUALS_AGENTS (
    AGENT_TOKEN_ADDRESS VARCHAR,
    NAME VARCHAR,
    SYMBOL VARCHAR,
    DESCRIPTION VARCHAR,
    CREATED_AT DATETIME,
    LP VARCHAR,
    TBA VARCHAR,
    WALLETS VARCHAR,
    IS_PUBLIC BOOLEAN,
    IS_PREMIUM BOOLEAN,
    X_USERNAME VARCHAR,
    STATUS VARCHAR,
    EXTRA_DATA VARCHAR,
    ADDED_AT DATETIME
);

ALTER TABLE TF_DB.TF_SCHEMA.VIRTUALS_AGENTS SET CHANGE_TRACKING = TRUE;

COPY INTO VIRTUALS_AGENTS
    from '@"TF_DB"."TF_SCHEMA"."TF_STAGE"/virtuals-agents.csv'
    FILE_FORMAT = (
        TYPE = CSV
        SKIP_HEADER = 1
        NULL_IF = '\\N'
        EMPTY_FIELD_AS_NULL = TRUE
        DATE_FORMAT = AUTO --'YYYY-MM-DD HH:MM:SS'
        FIELD_OPTIONALLY_ENCLOSED_BY = '"'
        ESCAPE = '\\'
    )
    ON_ERROR = CONTINUE
;



-- token-snapshot.csv
CREATE OR REPLACE TABLE TOKEN_SNAPSHOT (
    NAME VARCHAR,
    TOKEN_ADDRESS VARCHAR,
    SNAPSHOT_TIME DATETIME,
    TRANSFER_COUNT NUMBER,
    TRANSFER_AMOUNT NUMBER,
    BUY_COUNT NUMBER,
    BUY_AMOUNT NUMBER,
    SELL_COUNT NUMBER,
    SELL_AMOUNT NUMBER,
    MINT_COUNT NUMBER,
    MINT_AMOUNT NUMBER,
    BURN_COUNT NUMBER,
    BURN_AMOUNT NUMBER,
    TOTAL_SUPPLY NUMBER,
    HOLDER_COUNT NUMBER,
    USD_PRICE NUMBER,
    TVL NUMBER
);

ALTER TABLE TF_DB.TF_SCHEMA.TOKEN_SNAPSHOT SET CHANGE_TRACKING = TRUE;

COPY INTO TOKEN_SNAPSHOT
    from '@"TF_DB"."TF_SCHEMA"."TF_STAGE"/token-snapshot.csv'
    FILE_FORMAT = (
        TYPE = CSV
        SKIP_HEADER = 1
        NULL_IF = '\\N'
        EMPTY_FIELD_AS_NULL = TRUE
        DATE_FORMAT = AUTO --'YYYY-MM-DD HH:MM:SS'
        FIELD_OPTIONALLY_ENCLOSED_BY = '"'
        ESCAPE = '\\'
    )
    ON_ERROR = CONTINUE
;




-- running-token-balances.csv
CREATE OR REPLACE TABLE RUNNING_TOKEN_BALANCES (
    TOKEN_ADDRESS VARCHAR,
    HOLDER VARCHAR,
    BALANCE_CHANGE_TIME DATETIME,
    RUNNING_BALANCE NUMBER
);

ALTER TABLE TF_DB.TF_SCHEMA.RUNNING_TOKEN_BALANCES SET CHANGE_TRACKING = TRUE;

COPY INTO RUNNING_TOKEN_BALANCES
    from '@"TF_DB"."TF_SCHEMA"."TF_STAGE"/running-token-balances.csv'
    FILE_FORMAT = (
        TYPE = CSV
        SKIP_HEADER = 1
        NULL_IF = '\\N'
        EMPTY_FIELD_AS_NULL = TRUE
        DATE_FORMAT = AUTO --'YYYY-MM-DD HH:MM:SS'
        FIELD_OPTIONALLY_ENCLOSED_BY = '"'
        ESCAPE = '\\'
    )
    ON_ERROR = CONTINUE
;




-- token-trades.csv
CREATE OR REPLACE TABLE TOKEN_TRADES(
    LAUNCHPAD VARCHAR,
    BLOCK_TIMESTAMP DATETIME,
    TX_HASH VARCHAR,
    TX_SENDER_ADDRESS VARCHAR,
    POOL VARCHAR,
    SENDER VARCHAR,
    TAKER VARCHAR,
    BUY_TOKEN_ADDRESS VARCHAR,
    BUY_TOKEN_SYMBOL VARCHAR,
    BUY_TOKEN_NAME VARCHAR,
    BUY_AMOUNT NUMBER,
    SELL_TOKEN_ADDRESS VARCHAR,
    SELL_TOKEN_SYMBOL VARCHAR,
    SELL_TOKEN_NAME VARCHAR,
    SELL_AMOUNT NUMBER
);

ALTER TABLE TF_DB.TF_SCHEMA.TOKEN_TRADES SET CHANGE_TRACKING = TRUE;

COPY INTO TOKEN_TRADES
    from '@"TF_DB"."TF_SCHEMA"."TF_STAGE"/token-trades.csv'
    FILE_FORMAT = (
        TYPE = CSV
        SKIP_HEADER = 1
        NULL_IF = '\\N'
        EMPTY_FIELD_AS_NULL = TRUE
        DATE_FORMAT = AUTO --'YYYY-MM-DD HH:MM:SS'
        FIELD_OPTIONALLY_ENCLOSED_BY = '"'
        ESCAPE = '\\'
    )
    ON_ERROR = CONTINUE
;


-- split up the token-trades table for the GNN use case
-- create BUYERS table
CREATE OR REPLACE TABLE BUYERS AS
SELECT DISTINCT CAST(BUY_TOKEN_ADDRESS AS STRING) AS BUY_TOKEN_ADDRESS
FROM TOKEN_TRADES;

-- create SENDERS TABLE
CREATE OR REPLACE TABLE SENDERS AS
SELECT DISTINCT CAST(TX_SENDER_ADDRESS AS STRING) AS TX_SENDER_ADDRESS
FROM TOKEN_TRADES;

-- transactions table
-- for simplicity we'll modify the timestamp to YYYYMMDD
CREATE OR REPLACE TABLE TRANSACTIONS AS
SELECT
    CAST(TX_SENDER_ADDRESS AS STRING) AS TX_SENDER_ADDRESS,
    CAST(BUY_TOKEN_ADDRESS AS STRING) AS BUY_TOKEN_ADDRESS,
    CAST(BLOCK_TIMESTAMP AS DATE) AS BLOCK_TIMESTAMP,
    BUY_AMOUNT,
    BUY_TOKEN_SYMBOL,
    SELL_TOKEN_SYMBOL,
    SELL_AMOUNT
FROM TOKEN_TRADES;

CREATE OR REPLACE TABLE VALIDATION AS
SELECT
    TX_SENDER_ADDRESS,
    BLOCK_TIMESTAMP,
    -- in link prediction problems destination entities must by a list
    ARRAY_AGG(BUY_TOKEN_ADDRESS) AS BUY_TOKEN_ADDRESS
FROM TRANSACTIONS
WHERE BLOCK_TIMESTAMP = $validation_date
GROUP BY TX_SENDER_ADDRESS, BLOCK_TIMESTAMP;

CREATE OR REPLACE TABLE TEST AS
SELECT
    TX_SENDER_ADDRESS,
    BLOCK_TIMESTAMP,
    -- in link prediction problems destination entities must by a list
    ARRAY_AGG(BUY_TOKEN_ADDRESS) AS BUY_TOKEN_ADDRESS
FROM TRANSACTIONS
WHERE BLOCK_TIMESTAMP = $test_date
GROUP BY TX_SENDER_ADDRESS, BLOCK_TIMESTAMP;

CREATE OR REPLACE TABLE TRAIN AS
SELECT
    TX_SENDER_ADDRESS,
    BLOCK_TIMESTAMP,
    -- in link prediction problems destination entities must by a list
    ARRAY_AGG(BUY_TOKEN_ADDRESS) AS BUY_TOKEN_ADDRESS
FROM TRANSACTIONS
WHERE BLOCK_TIMESTAMP >= $train_start_date and BLOCK_TIMESTAMP < $train_end_date
GROUP BY TX_SENDER_ADDRESS, BLOCK_TIMESTAMP;


-- here we grant access to all schemas and tables, you might want to
-- select specific tables and schemas to grant access to
GRANT USAGE ON DATABASE TF_DB TO APPLICATION RELATIONALAI;
GRANT USAGE ON ALL SCHEMAS IN DATABASE TF_DB TO APPLICATION RELATIONALAI;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN DATABASE TF_DB TO APPLICATION RELATIONALAI;
-- grant write access to write results, we encourage the user to select specific schemas
-- to give write access to
GRANT CREATE TABLE ON ALL SCHEMAS IN DATABASE TF_DB TO APPLICATION RELATIONALAI;
